g <- d %>%
ggplot(aes(x=Month,y=Vuelos,fill=Month)) +
geom_col() +
facet_wrap(~Year,ncol = 2) +
ggtitle("Numero de vuelos por ano y mes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
if ( ano == "Todos" && mes != "Todos" ) { # Fijamos el mes.
d <- df %>% filter( Month == mes ) %>%
group_by( Year ) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Year,y=Vuelos,fill=Year)) +
geom_col() +
scale_x_continuous(breaks=seq(2012, 2018, 1)) +
ggtitle(paste("Numero de vuelos en ",mes," por ano")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
if ( ano != "Todos" && mes == "Todos" ) { # Fijamos el ano
d <- df %>% filter( Year == ano ) %>%
group_by(Month) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Month,y=Vuelos,fill=Month)) +
geom_col() +
ggtitle(paste("Numero de vuelos en el ano",ano)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
if ( ano != "Todos" && mes != "Todos" ) { # Fijamos el ano y el mes
d <- df %>% filter( Year == ano & Month == mes ) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=mes,y=Vuelos,fill=mes)) +
geom_col() +
ggtitle(paste("Numero de vuelos en el mes",mes," del ano ",ano)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
c <- list()
c[["plot"]] <- g
c[["Tabla"]] <- d
return(c)
}
runApp('C:/Users/Ignacio/Dropbox/Libro de vuelos')
runApp('C:/Users/Ignacio/Dropbox/Libro de vuelos')
runApp('C:/Users/Ignacio/Dropbox/Libro de vuelos')
#  c[["plot"]] <- g
#  c[["Tabla"]] <- d
return(c)
library(readxl)
library(lubridate)
library(anytime)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(plotly)
library(shiny)
#### Caraga de datos
libro <- read_excel("C:/Users/Ignacio/Dropbox/Libro de vuelos/Libro de vuelos-Flymasyter.xlsx",
sheet="Hoja1")
View(libro)
#### Procesado del dataset
libro <- libro[-which(is.na(libro[,1])==TRUE),c(1:7)]
colnames(libro) <- c("Fligth_number","Date","Time","Wing","Location","Landing","Track")
libro$Date <- convertToDate(libro$Date)
libro$Time <- format(strptime(libro$Time, "%Y-%m-%d %H:%M:%S"),"%T")
libro$Time <- hms(libro$Time)
libro$Year <- year(libro$Date)
libro$Month <- month(libro$Date, label = TRUE, abbr = FALSE)
libro$Month <- factor(libro$Month,
levels=c("enero","febrero","marzo","abril",
"mayo","junio","julio","agosto",
"septiembre","octubre","noviembre",
"diciembre"),
labels=c("January","February","March",
"April","May","June","July",
"August","September","October",
"November","December"))
libro <- libro[,c(1:3,8,9,4,5,6)]
plot_ano_mes <- function(df,ano,mes) {
if ( ano == "Todos" && mes == "Todos" ) { # No fijamos nada.
d <- df %>% group_by(Year,Month) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Month,y=Vuelos,fill=Month)) +
geom_col() +
facet_wrap(~Year,ncol = 2) +
ggtitle("Numero de vuelos por ano y mes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
if ( ano == "Todos" && mes != "Todos" ) { # Fijamos el mes.
d <- df %>% filter( Month == mes ) %>%
group_by( Year ) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Year,y=Vuelos,fill=Year)) +
geom_col() +
scale_x_continuous(breaks=seq(2012, 2018, 1)) +
ggtitle(paste("Numero de vuelos en ",mes," por ano")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
if ( ano != "Todos" && mes == "Todos" ) { # Fijamos el ano
d <- df %>% filter( Year == ano ) %>%
group_by(Month) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Month,y=Vuelos,fill=Month)) +
geom_col() +
ggtitle(paste("Numero de vuelos en el ano",ano)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
if ( ano != "Todos" && mes != "Todos" ) { # Fijamos el ano y el mes
d <- df %>% filter( Year == ano & Month == mes ) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=mes,y=Vuelos,fill=mes)) +
geom_col() +
ggtitle(paste("Numero de vuelos en el mes",mes," del ano ",ano)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
#  c <- list()
c <- list(plot = g, tabla = d)
#  c[["plot"]] <- g
#  c[["Tabla"]] <- d
return(c)
}
# datos <- libro %>% group_by(Year,Month) %>% summarise(Fligths=n())
#
# g1 <- ggplot(datos,aes(x=Month,y=Fligths,fill=Month)) +
#   geom_col() + facet_wrap(~Year,ncol = 2) +
#   ggtitle("Number of fligths by year and month") +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
#
# ggplotly(g1)
#
# datos2 <- libro %>% group_by(Year,Location) %>% summarise(Total=n())
#
# g2 <- ggplot(datos2,aes(x=Location,y=Total,fill=Location)) +
#   geom_col() +
#   facet_wrap(~Year, ncol=2) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position = "none")
#
# ggplotly(g2)
#
# g3 <- ggplot(libro,aes(x=as.numeric(Time)/60,fill=Year)) +
#   geom_density() +
#   facet_wrap(~Year,ncol = 2) +
#   xlab("Time (min)") +
#   scale_x_continuous(breaks = seq(0,300,30)) +
#   theme(axis.text.x = element_text(hjust = 1),
#         legend.position = "none")
#
# ggplotly(g3)
plot_ano_mes(libro,2016,"Todos")
plot_ano_mes(libro,2016,"Todos")
plot_ano_mes <- function(df,ano,mes) {
if ( ano == "Todos" && mes == "Todos" ) { # No fijamos nada.
d <- df %>% group_by(Year,Month) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Month,y=Vuelos,fill=Month)) +
geom_col() +
facet_wrap(~Year,ncol = 2) +
ggtitle("Numero de vuelos por año y mes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
if ( ano == "Todos" && mes != "Todos" ) { # Fijamos el mes.
d <- df %>% filter( Month == mes ) %>%
group_by( Year ) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Year,y=Vuelos,fill=Year)) +
geom_col() +
scale_x_continuous(breaks=seq(2012, 2018, 1)) +
ggtitle(paste("Numero de vuelos en ",mes," por ano")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
if ( ano != "Todos" && mes == "Todos" ) { # Fijamos el ano
d <- df %>% filter( Year == ano ) %>%
group_by(Month) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=Month,y=Vuelos,fill=Month)) +
geom_col() +
ggtitle(paste("Numero de vuelos en el año",ano)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
if ( ano != "Todos" && mes != "Todos" ) { # Fijamos el ano y el mes
d <- df %>% filter( Year == ano & Month == mes ) %>%
summarise(Vuelos = n())
g <- d %>%
ggplot(aes(x=mes,y=Vuelos,fill=mes)) +
geom_col() +
ggtitle(paste("Numero de vuelos en el mes",mes," del año ",ano)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "None")
}
#  c <- list()
c <- list(plot = g, tabla = d)
#  c[["plot"]] <- g
#  c[["Tabla"]] <- d
return(c)
}
plot_ano_mes(libro,2016,"Todos")
#### Libraries ####
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
#### Ignacio: This is to clean the user's environment
rm(list = ls(all = TRUE))
pacman::p_load("readr","ggplot2","dplyr","lubridate","plotly","scatterplot3d", "caret", "DMwR", "class", "e1071",
"caretEnsemble", "C50", "ISLR", "base", "randomForest", "stats", "ranger", "Metrics", "kknn", "gbm",
"ggpubr","gridExtra", "mlbench", "rayshader", "reshape2", "xgboost", "doParallel", "tidyverse","tidyr",
"radiant.model", "plyr")
######################## Upload file and set seed ####
set.seed(123)
# Import Data
#### Ignacio: Emma, avoid making use of this approach as it is computer dependant
#### In other words, this will not work into another computer as the new computer
#### doesn't need to have the same OS and same folder tree.
#### You can use the function "list.files", and then use the function "grep"
#### to look for your script.
loc   <- grep("Wifi_fingerprint.R",list.files(recursive=TRUE),value=TRUE)
iloc  <- which(unlist(gregexpr("/Wifi_fingerprint.R$",loc)) != -1)
myloc <- paste(getwd(),loc[iloc],sep="/")
setwd(substr(myloc,1,nchar(myloc)-nchar("Wifi_fingerprint.R")))
if (file.exists("All.Data.csv")) {
ReadyData <-read_csv("All.Data.csv")
} else{
# Load data
Train <-read_csv("trainingData.csv")
Valid <- read_csv("validationData.csv")
#Distinct rows in order to only keep unique rows (rows with active WAP)
Train <- dplyr::distinct(Train) # Observations: 19,937 to 19,300
Valid <- dplyr::distinct(Valid) # Observations: 1,111 to 1,111
#### Ignacio: Emma, you should justify the need of doing that.
#Combinde train and valid data
AllData <- rbind(Train, Valid)
################ Change columns into suiting data types ####
AllData$BUILDINGID<-as.factor(AllData$BUILDINGID)
AllData$FLOOR <- as.factor(AllData$FLOOR)
#################################### Take away low activity WAPs (lower than 3%) #####
k1 <- nearZeroVar(AllData[,1:520],uniqueCut = 0.03, saveMetrics = TRUE, allowParallel = TRUE)
AllData <- AllData[,- which(k1$nzv==T)]
#Observations: 20,411
#Variables: 400
############################ Delete variables that will not be used ####
DeleteVar <- c("SPACEID", "RELATIVEPOSITION", "USERID", "PHONEID", "TIMESTAMP")
for (i in DeleteVar) {AllData[,DeleteVar] <- NULL }
write.csv(AllData, file = "All.Data.csv", row.names = F)
}
ReadyData <- AllData
#### Ignacio: Delete unneded dataframes to save memory
rm(AllData)
#Split data in order to adjust WAPS
Y_var<- ReadyData[c((ncol(ReadyData)-4):ncol(ReadyData))]
WAPs <- ReadyData[,1:391]
#Change to 100's to minus 100
WAPs[WAPs == 100] <- -100
# Make all values positive and take away neagtive values
WAPs<- 100 + WAPs
WAPs[WAPs < 0] <- 0
#Take away WAPS with higher strenght than 70 due to not wanted in real life
WAPs[WAPs > 70 ] <- 0
#Plot new signal strenght
y <- stack(WAPs)
y <- y[-grep(0, y$values),]
hist(y$values, xlab = "WAP strength", main = "Distribution of WAPs signal stength", col = "blue", breaks=60)
#Create data frame
Data <-bind_cols(WAPs, Y_var)
Data$WAP5181<-NULL
############################################################################# Feature engineering
#Change to factor
Data$BUILDINGID <- as.factor (Data$BUILDINGID)
Data$FLOOR <- as.factor (Data$FLOOR)
##Create LOCATION variable
#### Ignacio: Emma, use this approach to prevent later problems. When you save
#### your data into a file, R doesn't save the variable type. Therefore, if
#### the separator is a "dot" when R reads back the file, will consider "0.0"
#### as "0", instead of a factor.
#Data$LOCATION <- with(Data, interaction(BUILDINGID, FLOOR, drop = T))
Data$LOCATION <- paste(Data$BUILDINGID,Data$FLOOR,sep = "_")
Data$LOCATION <- as.factor(Data$LOCATION)
#Create variable with highest WAP vaule
new_data <- Data[,1:391]
# row <- c()
# for (i in 1:nrow(new_data)){
#   a <- new_data[i, which.max(new_data[i,])]
#   row <- c(a, row)
#   print(i)
# }
#Add new column with max value of WAPs
#Data$MAX <- row
#### Ignacio: Much faster way
Data$MAX <- apply(new_data,1,which.max)
#### Ignacio: Min-max scaling
## Create simplyfied latitude and longitude
new_long <- Data$LONGITUDE - min(Data$LONGITUDE)
Data$LONGITUDE <- round(new_long, digits = 1)
new_lat <- Data$LATITUDE - min(Data$LATITUDE)
Data$LATITUDE <- round(new_lat, digits = 1)
longlat <- cbind(new_long, new_lat)
#### Save DF ready for models ####
if (!file.exists("Data_4_models.csv")) {
write.csv(Data, file ="Data_4_models.csv", row.names = F)
} else{
Model_data<-read.csv("Data_4_models.csv")
#### Ignacio: Emma, free memory!!!
rm(Data)
}
Model_data$LOCATION   <- as.factor(Model_data$LOCATION)
Model_data$BUILDINGID <- as.factor(Model_data$BUILDINGID)
Model_data$FLOOR      <- as.factor(Model_data$FLOOR)
########################################### Split data
set.seed(123)
inTrain    <- createDataPartition(y = Model_data$BUILDINGID, p = 0.6, t=3,list = FALSE)
trainSet   <- Model_data[inTrain,]
test_valid <- Model_data[-inTrain,]
# smp_siz <- floor(0.5*nrow(test_valid))
# test_ind <- sample(seq_len(nrow(test_valid)), size = smp_siz)
#### Ignacio: Emma, avoid making use of the "sample" function as it doesn't
#### respect the underlying distribution of your data.
test_ind <- createDataPartition(test_valid$BUILDINGID, p = 0.5, list = FALSE)
testSet  <- test_valid[test_ind,]
validSet <- test_valid[-test_ind,]
# Check for "models" folder.
#### Ignacio: Emma, try to be more organized.
if (!dir.exists("models")) {
dir.create(file.path(getwd(), "models"), showWarnings = FALSE)
setwd(file.path(getwd(), "models"))
} else{
setwd(file.path(getwd(), "models"))
}
if (file.exists("SVM_Building_Model.rds")) {
svm_building <- readRDS("SVM_Building_Model.rds")
} else{
set.seed(123)
system.time(svm_building <- svm(BUILDINGID ~ .-FLOOR -LOCATION -LONGITUDE -LATITUDE, data = trainSet))
#Saving model
saveRDS(svm_building,"SVM_Building_Model.rds")
}
#Output
svm_building
#Test the svm model
svm_building_pred  <- predict(svm_building, newdata=testSet)
svm_building_predV <- predict(svm_building, newdata=validSet)
# Confusion Matrix
print(svm_building_cm <- confusionMatrix (svm_building_pred, testSet$BUILDINGID))
print(svm_building_cmV <- confusionMatrix (svm_building_predV, validSet$BUILDINGID))
if (file.exists("Ranger_Building_Model.rds")) {
ranger_building <- readRDS("Ranger_Building_Model.rds")
} else{
set.seed(123)
system.time(ranger_building<-ranger(BUILDINGID~.-LOCATION - FLOOR -LATITUDE - LONGITUDE, trainSet, importance="permutation"))
#Saving model
saveRDS(ranger_building,"Ranger_Building_Model.rds")
}
#Output
summary(ranger_building)
#Test the ranger model
ranger_building_pred  <- predict(ranger_building, testSet)
ranger_building_predV <- predict(ranger_building, validSet)
# Confusion Matrix
ranger_table_building    <- table(testSet$BUILDINGID, ranger_building_pred$predictions)
#print(ranger_building_cm <- (confusionMatrix(ranger_table_building)))
ranger_building_cm <- confusionMatrix(ranger_building_pred$predictions,testSet$BUILDINGID)
#ranger_table_buildingV<-table(validSet$BUILDINGID, ranger_building_predV$predictions)
ranger_buildingV_cmV <- confusionMatrix(ranger_building_predV$predictions,validSet$BUILDINGID)
print(ranger_buildingV_cmV)
set.seed(123)
inTrainFloor <- createDataPartition(y = Model_data$LOCATION, p = 0.6, t=3, list = FALSE)
trainSet     <- Model_data [inTrainFloor,]
test_valid   <- Model_data[-inTrainFloor,]
#### Ignacio: Emma, avoid making use of the "sample" function as it doesn't
#### respect the underlying distribution of your data.
set.seed(123)
test_ind <- createDataPartition(test_valid$LOCATION, p = 0.5, list = FALSE)
# set.seed(123)
# smp_siz = floor(0.5*nrow(test_valid))
# test_ind = sample(seq_len(nrow(test_valid)), size = smp_siz)
testSet  <- test_valid[test_ind,]
validSet <- test_valid[-test_ind,]
if (file.exists("SVM_Floor_Model.rds")) {
svm_floor <- readRDS("SVM_Floor_Model.rds")
} else{
set.seed(123)
system.time(svm_floor <- svm(LOCATION ~ .-BUILDINGID - FLOOR - LOCATION - LATITUDE , data = trainSet))
#Saving model
saveRDS(svm_floor,"SVM_Floor_Model.rds")
}
#Output
summary(svm_floor)
#Test the svm model
svm_floor_pred  <- predict(svm_floor, newdata=testSet)
svm_floor_predV <- predict(svm_floor, newdata=validSet)
#Confusion Matrix
print(svm_floor_cm <- confusionMatrix (svm_floor_pred, testSet$LOCATION))
svm_floor_cmV <- confusionMatrix (svm_floor_predV, validSet$LOCATION)
if (file.exists("Ranger_Floor_Model.rds")) {
ranger_floor<- readRDS("Ranger_Floor_Model.rds")
} else{
set.seed(123)
system.time(ranger_floor<-ranger(LOCATION~.-BUILDINGID - FLOOR -LATITUDE - LONGITUDE, trainSet, importance="permutation"))
#Saving model
saveRDS(ranger_floor,"Ranger_Floor_Model.rds")
}
#Output
summary(ranger_floor)
#Test the ranger model
ranger_floor_pred  <- predict(ranger_floor, testSet)
ranger_floor_predV <- predict(ranger_floor, validSet)
#Confusion Matrix
#ranger_table_floor<-table(testSet$LOCATION, ranger_floor_pred$predictions)
ranger_floor_cm     <- confusionMatrix(ranger_floor_pred$predictions,testSet$LOCATION)
ranger_floor_cmV    <- confusionMatrix(ranger_floor_predV$predictions,validSet$LOCATION)
#separate column
#extract(data, col, into, regex = "([[:alnum:]]+)", remove = TRUE,
#        convert = FALSE, ...)
#If you just want the second variable:
df <- data.frame(ranger_floor_pred = c("LOCATION"))
df %>% separate("LOCATION", c("NA", "Predicted Floor"))
#PROV <-ranger_floor_pred %>% separate(LOCATION, c(NA, "Predicted floor"))
PROV <- as.factor(substr(ranger_floor_pred$predictions,3,3))
#Functions to imit errors in predicitons with straight line equation
below <- function(x,pred) {value = (x * -.51) + 175; if(value > pred){return(value)}; return(pred)}
above <- function(x,pred) {value = (x * -0.56) + 315; if(value > pred) {return(value)}; return(pred)}
set.seed(123)
inTrainFloor<- createDataPartition(y = Model_data$LATITUDE, p = 0.6, t=3,list = FALSE)
trainSet   <- Model_data [inTrainFloor,]
test_valid <- Model_data[-inTrainFloor,]
set.seed(123)
test_ind <- createDataPartition(trainSet$LATITUDE, p = 0.5, list = FALSE)
#smp_siz = floor(0.5*nrow(test_valid))
#test_ind = sample(seq_len(nrow(test_valid)), size = smp_siz)
testSet  <- test_valid[test_ind,]
validSet <- test_valid[-test_ind,]
if (file.exists("SVM_Latitude_Model.rds")) {
svm_lat <- readRDS("SVM_Latitude_Model.rds")
} else{
set.seed(123)
system.time(svm_lat <- svm(LATITUDE ~ .+MAX -BUILDINGID - FLOOR - LOCATION - LONGITUDE, data = trainSet))
#Saving model
saveRDS(svm_lat,"SVM_Latitude_Model.rds")
}
#Output
summary(svm_lat)
#Predict the svm model
svm_lat_pred  <- predict(svm_lat, newdata=testSet)
svm_lat_predV <- predict(svm_lat, newdata=validSet)
#Error metrics
print(postResample(svm_lat_pred, testSet$LATITUDE))
print(postResample(svm_lat_predV,validSet$LATITUDE))
########################################################### Ranger (Random forest) ####
if (file.exists("Ranger_Latitude_Model.rds")) {
ranger_lat <- readRDS("Ranger_Latitude_Model.rds")
} else{
set.seed(123)
system.time(ranger_lat <- ranger(LATITUDE ~. -BUILDINGID - FLOOR - LOCATION - LATITUDE ,trainSet,  importance = "permutation", case.weights = T))
#Saving model
saveRDS(ranger_lat,"Ranger_Latitude_Model.rds")
}
#Output
summary(ranger_lat)
#Predict the ranger model
ranger_lat_pred  <- predict(ranger_lat, testSet)
ranger_lat_predV <- predict(ranger_lat, validSet)
#Error metrics
print(postResample(ranger_lat_pred$predictions, testSet$LATITUDE))
print(postResample(ranger_lat_predV$predictions, validSet$LATITUDE))
colnames(testSet)
colnames(validSet)
#Output
summary(svm_lat)
#Predict the svm model
svm_lat_pred  <- predict(svm_lat, newdata=testSet)
svm_lat_predV <- predict(svm_lat, newdata=validSet)
if (file.exists("SVM_Latitude_Model.rds")) {
svm_lat <- readRDS("SVM_Latitude_Model.rds")
} else{
set.seed(123)
system.time(svm_lat <- svm(LATITUDE ~ .+MAX -BUILDINGID - FLOOR - LOCATION - LONGITUDE, data = trainSet))
#Saving model
saveRDS(svm_lat,"SVM_Latitude_Model.rds")
}
#Output
summary(svm_lat)
#Predict the svm model
svm_lat_pred  <- predict(svm_lat, newdata=testSet)
svm_lat_predV <- predict(svm_lat, newdata=validSet)
#Error metrics
print(postResample(svm_lat_pred, testSet$LATITUDE))
print(postResample(svm_lat_predV,validSet$LATITUDE))
nrow(testSet)
svm_lat
colnames(testSet)
#Predict the svm model
svm_lat_pred  <- predict(svm_lat, newdata=testSet)
svm_lat_predV <- predict(svm_lat, newdata=validSet)
#Error metrics
print(postResample(svm_lat_pred, testSet$LATITUDE))
nrow(testSet)
nrow(svm_lat_pred)
length(svm_lat_pred)
length(svm_lat_predV)
nrow(validSet)
